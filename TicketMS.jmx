<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.4">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="projectpath" elementType="Argument">
            <stringProp name="Argument.name">projectpath</stringProp>
            <stringProp name="Argument.value">${__P(projectpath,D:\Repositories\RegistryMS)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="HOST" elementType="Argument">
            <stringProp name="Argument.name">HOST</stringProp>
            <stringProp name="Argument.value">${__P(HOST,ticket.qa.use1.cwticketdev.cwnet.io)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="duration" elementType="Argument">
            <stringProp name="Argument.name">duration</stringProp>
            <stringProp name="Argument.value">${__P(duration,3600)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="get_all_keys_users" elementType="Argument">
            <stringProp name="Argument.name">get_all_keys_users</stringProp>
            <stringProp name="Argument.value">${__P(get_all_keys_users,1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="get_all_keys_rampup" elementType="Argument">
            <stringProp name="Argument.name">get_all_keys_rampup</stringProp>
            <stringProp name="Argument.value">${__P(get_all_keys_rampup,10)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="get_single_key_users" elementType="Argument">
            <stringProp name="Argument.name">get_single_key_users</stringProp>
            <stringProp name="Argument.value">${__P(get_single_key_users,1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="get_single_key_rampup" elementType="Argument">
            <stringProp name="Argument.name">get_single_key_rampup</stringProp>
            <stringProp name="Argument.value">${__P(get_single_key_rampup,40)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="kafka_producer_users" elementType="Argument">
            <stringProp name="Argument.name">kafka_producer_users</stringProp>
            <stringProp name="Argument.value">${__P(kafka_producer_users,1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="kafka_producer_rampup" elementType="Argument">
            <stringProp name="Argument.name">kafka_producer_rampup</stringProp>
            <stringProp name="Argument.value">${__P(kafka_producer_rampup,1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="KAFKA_TOPIC" elementType="Argument">
            <stringProp name="Argument.name">KAFKA_TOPIC</stringProp>
            <stringProp name="Argument.value">${__P(KAFKA_TOPIC,registry)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="KAFKA_BROKERS" elementType="Argument">
            <stringProp name="Argument.name">KAFKA_BROKERS</stringProp>
            <stringProp name="Argument.value">${__P(KAFKA_BROKERS,172.28.18.65:9092\,172.28.19.46:9092\,172.28.18.96:9092\,172.28.19.139:9092\,172.28.17.137:9092\,172.28.17.166:9092\,172.28.18.80:9092\,172.28.16.27:9092\,172.28.18.100:9092)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="filename" elementType="Argument">
            <stringProp name="Argument.name">filename</stringProp>
            <stringProp name="Argument.value">${__P(filename,RegsitryMS_VRT)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="AMS_URL" elementType="Argument">
            <stringProp name="Argument.name">AMS_URL</stringProp>
            <stringProp name="Argument.value">${__P(AMS_URL,internal-perf-external-ALB-agent-1576867507.us-east-1.elb.amazonaws.com)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="kafka_producer_tpm" elementType="Argument">
            <stringProp name="Argument.name">kafka_producer_tpm</stringProp>
            <stringProp name="Argument.value">${__P(kafka_producer_tpm,100)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="get_all_keys_tpm" elementType="Argument">
            <stringProp name="Argument.name">get_all_keys_tpm</stringProp>
            <stringProp name="Argument.value">${__P(get_all_keys_tpm,10)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="get_single_key_tpm" elementType="Argument">
            <stringProp name="Argument.name">get_single_key_tpm</stringProp>
            <stringProp name="Argument.value">${__P(get_single_key_tpm,10)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="post_registry_msg" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">100</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">10</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1514381761000</longProp>
        <longProp name="ThreadGroup.end_time">1514381775000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${duration}</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="post_registry_msg" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">[ &#xd;
    { &#xd;
        &quot;endpointID&quot;: &quot;${Endpointid}&quot;, &#xd;
        &quot;path&quot;: &quot;HKEY_LOCAL_MACHINECLUSTER&quot;, &#xd;
        &quot;exist&quot;: false, &#xd;
        &quot;timestamp&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss,)}.486Z&quot; &#xd;
    }, &#xd;
    { &#xd;
        &quot;endpointID&quot;: &quot;${Endpointid}&quot;, &#xd;
        &quot;path&quot;: &quot;HKEY_LOCAL_MACHINECLUSTEREXCHANGEDAGNETWORK&quot;, &#xd;
        &quot;exist&quot;: false, &#xd;
        &quot;timestamp&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss,)}.486Z&quot; &#xd;
    }, &#xd;
    { &#xd;
        &quot;endpointID&quot;: &quot;${Endpointid}&quot;, &#xd;
        &quot;path&quot;: &quot;HKEY_LOCAL_MACHINESOFTWAREMICROSOFTEXCHANGESERVERV14&quot;, &#xd;
        &quot;exist&quot;: false, &#xd;
        &quot;timestamp&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss,)}.486Z&quot; &#xd;
    }, &#xd;
    { &#xd;
        &quot;endpointID&quot;: &quot;${Endpointid}&quot;, &#xd;
        &quot;path&quot;: &quot;HKEY_LOCAL_MACHINESOFTWAREMICROSOFTEXCHANGESERVERV15&quot;, &#xd;
        &quot;exist&quot;: false, &#xd;
        &quot;timestamp&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss,)}.486Z&quot; &#xd;
    }, &#xd;
    { &#xd;
        &quot;endpointID&quot;: &quot;${Endpointid}&quot;, &#xd;
        &quot;path&quot;: &quot;HKEY_LOCAL_MACHINESOFTWAREMICROSOFTEXCHANGEV8.0&quot;, &#xd;
        &quot;exist&quot;: false, &#xd;
        &quot;timestamp&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss,)}.486Z&quot; &#xd;
    }, &#xd;
    { &#xd;
        &quot;endpointID&quot;: &quot;${Endpointid}&quot;, &#xd;
        &quot;path&quot;: &quot;HKEY_LOCAL_MACHINESOFTWAREMICROSOFTEXCHANGEV8.0CLIENTACCESSROLE&quot;, &#xd;
        &quot;exist&quot;: false, &#xd;
        &quot;timestamp&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss,)}.486Z&quot; &#xd;
    }, &#xd;
    { &#xd;
        &quot;endpointID&quot;: &quot;${Endpointid}&quot;, &#xd;
        &quot;path&quot;: &quot;HKEY_LOCAL_MACHINESOFTWAREMICROSOFTEXCHANGEV8.0EDGETRANSPORTROLE&quot;, &#xd;
        &quot;exist&quot;: false, &#xd;
        &quot;timestamp&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss,)}.486Z&quot; &#xd;
    }, &#xd;
    { &#xd;
        &quot;endpointID&quot;: &quot;${Endpointid}&quot;, &#xd;
        &quot;path&quot;: &quot;HKEY_LOCAL_MACHINESOFTWAREMICROSOFTEXCHANGEV8.0HUBTRANSPORTROLE&quot;, &#xd;
        &quot;exist&quot;: false, &#xd;
        &quot;timestamp&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss,)}.486Z&quot; &#xd;
    }, &#xd;
    { &#xd;
        &quot;endpointID&quot;: &quot;${Endpointid}&quot;, &#xd;
        &quot;path&quot;: &quot;HKEY_LOCAL_MACHINESOFTWAREMICROSOFTEXCHANGEV8.0MAILBOXROLE&quot;, &#xd;
        &quot;exist&quot;: false, &#xd;
        &quot;timestamp&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss,)}.486Z&quot; &#xd;
    }, &#xd;
    { &#xd;
        &quot;endpointID&quot;: &quot;${Endpointid}&quot;, &#xd;
        &quot;path&quot;: &quot;HKEY_LOCAL_MACHINESOFTWAREMICROSOFTMICROSOFT SQL SERVER&quot;, &#xd;
        &quot;exist&quot;: false, &#xd;
        &quot;timestamp&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss,)}.486Z&quot; &#xd;
    }, &#xd;
    { &#xd;
        &quot;endpointID&quot;: &quot;${Endpointid}&quot;, &#xd;
        &quot;path&quot;: &quot;HKEY_LOCAL_MACHINESOFTWAREMICROSOFTSERVERMANAGERSERVICINGSTORAGESERVERCOMPONENTCACHEAD-DOMAIN-SERVICES&quot;, &#xd;
        &quot;exist&quot;: false, &#xd;
        &quot;timestamp&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss,)}.486Z&quot;, &#xd;
        &quot;values&quot;: [ &#xd;
            { &#xd;
                &quot;name&quot;: &quot;InstallState&quot;, &#xd;
                &quot;exist&quot;: false &#xd;
            } &#xd;
        ] &#xd;
    }, &#xd;
    { &#xd;
        &quot;endpointID&quot;: &quot;${Endpointid}&quot;, &#xd;
        &quot;path&quot;: &quot;HKEY_LOCAL_MACHINESOFTWAREMICROSOFTSERVERMANAGERSERVICINGSTORAGESERVERCOMPONENTCACHEDHCP&quot;, &#xd;
        &quot;exist&quot;: false, &#xd;
        &quot;timestamp&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss,)}.486Z&quot;, &#xd;
        &quot;values&quot;: [ &#xd;
            { &#xd;
                &quot;name&quot;: &quot;InstallState&quot;, &#xd;
                &quot;exist&quot;: false &#xd;
            } &#xd;
        ] &#xd;
    }, &#xd;
    { &#xd;
        &quot;endpointID&quot;: &quot;${Endpointid}&quot;, &#xd;
        &quot;path&quot;: &quot;HKEY_LOCAL_MACHINESOFTWAREMICROSOFTSERVERMANAGERSERVICINGSTORAGESERVERCOMPONENTCACHEDNS&quot;, &#xd;
        &quot;exist&quot;: false, &#xd;
        &quot;timestamp&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss,)}.486Z&quot;, &#xd;
        &quot;values&quot;: [ &#xd;
            { &#xd;
                &quot;name&quot;: &quot;InstallState&quot;, &#xd;
                &quot;exist&quot;: false &#xd;
            } &#xd;
        ] &#xd;
    }, &#xd;
    { &#xd;
        &quot;endpointID&quot;: &quot;${Endpointid}&quot;, &#xd;
        &quot;path&quot;: &quot;HKEY_LOCAL_MACHINESOFTWAREMICROSOFTWINDOWS NTCURRENTVERSION&quot;, &#xd;
        &quot;exist&quot;: true, &#xd;
        &quot;timestamp&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss,)}.486Z&quot;, &#xd;
        &quot;values&quot;: [ &#xd;
            { &#xd;
                &quot;name&quot;: &quot;CurrentVersion&quot;, &#xd;
                &quot;data&quot;: &quot;6.3&quot;, &#xd;
                &quot;exist&quot;: true &#xd;
            } &#xd;
        ] &#xd;
    }, &#xd;
    { &#xd;
        &quot;endpointID&quot;: &quot;${Endpointid}&quot;, &#xd;
        &quot;path&quot;: &quot;HKEY_LOCAL_MACHINESOFTWAREMICROSOFTWINDOWS NTCURRENTVERSIONSCHEDULETASKCACHETREEMICROSOFTWINDOWSBACKUPMICROSOFT-WINDOWS-WINDOWSBACKUP&quot;, &#xd;
        &quot;exist&quot;: false, &#xd;
        &quot;timestamp&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss,)}.486Z&quot;, &#xd;
        &quot;values&quot;: [ &#xd;
            { &#xd;
                &quot;name&quot;: &quot;Id&quot;, &#xd;
                &quot;exist&quot;: false &#xd;
            } &#xd;
        ] &#xd;
    }, &#xd;
    { &#xd;
        &quot;endpointID&quot;: &quot;${Endpointid}&quot;, &#xd;
        &quot;path&quot;: &quot;HKEY_LOCAL_MACHINESOFTWAREMICROSOFTWINDOWS NTCURRENTVERSIONVIRTUALIZATION&quot;, &#xd;
        &quot;exist&quot;: true, &#xd;
        &quot;timestamp&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss,)}.486Z&quot; &#xd;
    }, &#xd;
    { &#xd;
        &quot;endpointID&quot;: &quot;${Endpointid}&quot;, &#xd;
        &quot;path&quot;: &quot;HKEY_LOCAL_MACHINESOFTWAREMICROSOFTWINDOWSNTCURRENTVERSIONSCHEDULETASKCACHETREEMICROSOFTWINDOWSBACKUPMICROSOFT-WINDOWS-WINDOWSBACKUP&quot;, &#xd;
        &quot;exist&quot;: false, &#xd;
        &quot;timestamp&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss,)}.486Z&quot; &#xd;
    }, &#xd;
    { &#xd;
        &quot;endpointID&quot;: &quot;${Endpointid}&quot;, &#xd;
        &quot;path&quot;: &quot;HKEY_LOCAL_MACHINESOFTWAREMICROSOFTWINDOWSCURRENTVERSIONOEMINFORMATIONWINDOWS AZURE&quot;, &#xd;
        &quot;exist&quot;: false, &#xd;
        &quot;timestamp&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss,)}.486Z&quot; &#xd;
    }, &#xd;
    { &#xd;
        &quot;endpointID&quot;: &quot;${Endpointid}&quot;, &#xd;
        &quot;path&quot;: &quot;HKEY_LOCAL_MACHINESOFTWAREMICROSOFTWINDOWSCURRENTVERSIONUNINSTALLMICROSOFT EXCHANGE V14&quot;, &#xd;
        &quot;exist&quot;: false, &#xd;
        &quot;timestamp&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss,)}.486Z&quot; &#xd;
    }, &#xd;
    { &#xd;
        &quot;endpointID&quot;: &quot;${Endpointid}&quot;, &#xd;
        &quot;path&quot;: &quot;HKEY_LOCAL_MACHINESOFTWAREMICROSOFTWINDOWSCURRENTVERSIONUNINSTALL{24B2C164-DE66-44FE-B468-A46D9D5E6B31}&quot;, &#xd;
        &quot;exist&quot;: false, &#xd;
        &quot;timestamp&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss,)}.486Z&quot; &#xd;
    }, &#xd;
    { &#xd;
        &quot;endpointID&quot;: &quot;${Endpointid}&quot;, &#xd;
        &quot;path&quot;: &quot;HKEY_LOCAL_MACHINESOFTWAREMICROSOFTWINDOWSCURRENTVERSIONUNINSTALL{2B8EC4BD-5638-47E2-8817-1A50B38A828D}&quot;, &#xd;
        &quot;exist&quot;: false, &#xd;
        &quot;timestamp&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss,)}.486Z&quot; &#xd;
    }, &#xd;
    { &#xd;
        &quot;endpointID&quot;: &quot;${Endpointid}&quot;, &#xd;
        &quot;path&quot;: &quot;HKEY_LOCAL_MACHINESOFTWAREMICROSOFTWINDOWSCURRENTVERSIONUNINSTALL{5717D53E-DD6D-4D1E-8A1F-C7BE620F65AA}&quot;, &#xd;
        &quot;exist&quot;: false, &#xd;
        &quot;timestamp&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss,)}.486Z&quot; &#xd;
    }, &#xd;
    { &#xd;
        &quot;endpointID&quot;: &quot;${Endpointid}&quot;, &#xd;
        &quot;path&quot;: &quot;HKEY_LOCAL_MACHINESOFTWAREMICROSOFTWINDOWSCURRENTVERSIONUNINSTALL{65D9643D-06E8-47D6-865E-80F4CC9BB879}&quot;, &#xd;
        &quot;exist&quot;: false, &#xd;
        &quot;timestamp&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss,)}.486Z&quot; &#xd;
    }, &#xd;
    { &#xd;
        &quot;endpointID&quot;: &quot;${Endpointid}&quot;, &#xd;
        &quot;path&quot;: &quot;HKEY_LOCAL_MACHINESOFTWAREMICROSOFTWINDOWSCURRENTVERSIONUNINSTALL{74F3BB3C-A434-48FA-AAC1-3FC37CD2B0DB}&quot;, &#xd;
        &quot;exist&quot;: false, &#xd;
        &quot;timestamp&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss,)}.486Z&quot; &#xd;
    }, &#xd;
    { &#xd;
        &quot;endpointID&quot;: &quot;${Endpointid}&quot;, &#xd;
        &quot;path&quot;: &quot;HKEY_LOCAL_MACHINESOFTWAREMICROSOFTWINDOWSCURRENTVERSIONUNINSTALL{775CF3DA-C007-4709-B4CC-CE2239BE2E03}&quot;, &#xd;
        &quot;exist&quot;: false, &#xd;
        &quot;timestamp&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss,)}.486Z&quot; &#xd;
    }, &#xd;
    { &#xd;
        &quot;endpointID&quot;: &quot;${Endpointid}&quot;, &#xd;
        &quot;path&quot;: &quot;HKEY_LOCAL_MACHINESOFTWAREMICROSOFTWINDOWSCURRENTVERSIONUNINSTALL{7F4210A8-D3B4-480A-835E-D5DAA0D0B157}&quot;, &#xd;
        &quot;exist&quot;: false, &#xd;
        &quot;timestamp&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss,)}.486Z&quot; &#xd;
    }, &#xd;
    { &#xd;
        &quot;endpointID&quot;: &quot;${Endpointid}&quot;, &#xd;
        &quot;path&quot;: &quot;HKEY_LOCAL_MACHINESOFTWAREMICROSOFTWINDOWSCURRENTVERSIONUNINSTALL{8B102332-6052-4AF3-ADFA-35A3DED0506A}&quot;, &#xd;
        &quot;exist&quot;: false, &#xd;
        &quot;timestamp&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss,)}.486Z&quot; &#xd;
    }, &#xd;
    { &#xd;
        &quot;endpointID&quot;: &quot;${Endpointid}&quot;, &#xd;
        &quot;path&quot;: &quot;HKEY_LOCAL_MACHINESOFTWAREMICROSOFTWINDOWSCURRENTVERSIONUNINSTALL{9161A261-6ABE-4668-BBFA-AD06B3F642CF}&quot;, &#xd;
        &quot;exist&quot;: false, &#xd;
        &quot;timestamp&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss,)}.486Z&quot; &#xd;
    }, &#xd;
    { &#xd;
        &quot;endpointID&quot;: &quot;${Endpointid}&quot;, &#xd;
        &quot;path&quot;: &quot;HKEY_LOCAL_MACHINESOFTWAREMICROSOFTWINDOWSCURRENTVERSIONUNINSTALL{C160866F-DE53-434F-ADF1-CC42ABBF8778}&quot;, &#xd;
        &quot;exist&quot;: false, &#xd;
        &quot;timestamp&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss,)}.486Z&quot; &#xd;
    }, &#xd;
    { &#xd;
        &quot;endpointID&quot;: &quot;${Endpointid}&quot;, &#xd;
        &quot;path&quot;: &quot;HKEY_LOCAL_MACHINESOFTWAREMICROSOFTWINDOWSCURRENTVERSIONUNINSTALL{D3574E0C-360A-44D5-858C-33323C2D79F2}&quot;, &#xd;
        &quot;exist&quot;: false, &#xd;
        &quot;timestamp&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss,)}.486Z&quot; &#xd;
    }, &#xd;
    { &#xd;
        &quot;endpointID&quot;: &quot;${Endpointid}&quot;, &#xd;
        &quot;path&quot;: &quot;HKEY_LOCAL_MACHINESOFTWAREMICROSOFTWINDOWSCURRENTVERSIONUNINSTALL{DB20F7FD-67BC-4813-8808-78F63E89EB56}&quot;, &#xd;
        &quot;exist&quot;: false, &#xd;
        &quot;timestamp&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss,)}.486Z&quot; &#xd;
    }, &#xd;
    { &#xd;
        &quot;endpointID&quot;: &quot;${Endpointid}&quot;, &#xd;
        &quot;path&quot;: &quot;HKEY_LOCAL_MACHINESOFTWAREMICROSOFTWINDOWSCURRENTVERSIONUNINSTALL{EAE76D62-2691-4883-8BBB-1F2EE6D370D}&quot;, &#xd;
        &quot;exist&quot;: false, &#xd;
        &quot;timestamp&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss,)}.486Z&quot; &#xd;
    }, &#xd;
    { &#xd;
        &quot;endpointID&quot;: &quot;${Endpointid}&quot;, &#xd;
        &quot;path&quot;: &quot;HKEY_LOCAL_MACHINESOFTWAREMICROSOFTWINDOWSCURRENTVERSIONUNINSTALL{F95DE19F-CF69-4B03-81B6-9EC050D20D3B}&quot;, &#xd;
        &quot;exist&quot;: false, &#xd;
        &quot;timestamp&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss,)}.486Z&quot; &#xd;
    }, &#xd;
    { &#xd;
        &quot;endpointID&quot;: &quot;${Endpointid}&quot;, &#xd;
        &quot;path&quot;: &quot;HKEY_LOCAL_MACHINESOFTWAREMICROSOFTWINDOWSCURRENTVERSIONUNINSTALL{FC6FA539-452D-4A9B-8065-C1FA74B86F83}&quot;, &#xd;
        &quot;exist&quot;: false, &#xd;
        &quot;timestamp&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss,)}.486Z&quot; &#xd;
    }, &#xd;
    { &#xd;
        &quot;endpointID&quot;: &quot;${Endpointid}&quot;, &#xd;
        &quot;path&quot;: &quot;HKEY_LOCAL_MACHINESOFTWAREMICROSOFTWINDOWSCURRENTVERSIONWINDOWSUPDATEAUTO UPDATEREBOOTREQUIRED&quot;, &#xd;
        &quot;exist&quot;: false, &#xd;
        &quot;timestamp&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss,)}.486Z&quot; &#xd;
    }, &#xd;
    { &#xd;
        &quot;endpointID&quot;: &quot;${Endpointid}&quot;, &#xd;
        &quot;path&quot;: &quot;HKEY_LOCAL_MACHINESYSTEMCURRENTCONTROLSETCONTROLPRODUCTOPTIONS&quot;, &#xd;
        &quot;exist&quot;: true, &#xd;
        &quot;timestamp&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss,)}.486Z&quot;, &#xd;
        &quot;values&quot;: [ &#xd;
            { &#xd;
                &quot;name&quot;: &quot;ProductType&quot;, &#xd;
                &quot;data&quot;: &quot;WinNT&quot;, &#xd;
                &quot;exist&quot;: true &#xd;
            } &#xd;
        ] &#xd;
    }, &#xd;
    { &#xd;
        &quot;endpointID&quot;: &quot;${Endpointid}&quot;, &#xd;
        &quot;path&quot;: &quot;HKEY_LOCAL_MACHINESYSTEMCURRENTCONTROLSETCONTROLPRODUCTOPTIONSPRODUCTTYPE&quot;, &#xd;
        &quot;exist&quot;: false, &#xd;
        &quot;timestamp&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss,)}.486Z&quot;, &#xd;
        &quot;values&quot;: [ &#xd;
            { &#xd;
                &quot;name&quot;: &quot;LanmanNT&quot;, &#xd;
                &quot;exist&quot;: false &#xd;
            } &#xd;
        ] &#xd;
    }, &#xd;
    { &#xd;
        &quot;endpointID&quot;: &quot;${Endpointid}&quot;, &#xd;
        &quot;path&quot;: &quot;HKEY_LOCAL_MACHINESYSTEMCURRENTCONTROLSETCONTROLSYSTEMINFORMATION&quot;, &#xd;
        &quot;exist&quot;: true, &#xd;
        &quot;timestamp&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss,)}.486Z&quot;, &#xd;
        &quot;values&quot;: [ &#xd;
            { &#xd;
                &quot;name&quot;: &quot;SystemProductName&quot;, &#xd;
                &quot;data&quot;: &quot;VMware Virtual Platform&quot;, &#xd;
                &quot;exist&quot;: true &#xd;
            } &#xd;
        ] &#xd;
    }, &#xd;
    { &#xd;
        &quot;endpointID&quot;: &quot;${Endpointid}&quot;, &#xd;
        &quot;path&quot;: &quot;HKEY_LOCAL_MACHINESYSTEMCURRENTCONTROLSETSERVICESDFSR&quot;, &#xd;
        &quot;exist&quot;: false, &#xd;
        &quot;timestamp&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss,)}.486Z&quot; &#xd;
    }, &#xd;
    { &#xd;
        &quot;endpointID&quot;: &quot;${Endpointid}&quot;, &#xd;
        &quot;path&quot;: &quot;HKEY_LOCAL_MACHINESYSTEMCURRENTCONTROLSETSERVICESDFSRPARAMETERSSYSVOLS&quot;, &#xd;
        &quot;exist&quot;: false, &#xd;
        &quot;timestamp&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss,)}.486Z&quot; &#xd;
    }, &#xd;
    { &#xd;
        &quot;endpointID&quot;: &quot;${Endpointid}&quot;, &#xd;
        &quot;path&quot;: &quot;HKEY_LOCAL_MACHINESYSTEMCURRENTCONTROLSETSERVICESMSEXCHANGEIS&quot;, &#xd;
        &quot;exist&quot;: false, &#xd;
        &quot;timestamp&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss,)}.486Z&quot; &#xd;
    }, &#xd;
    { &#xd;
        &quot;endpointID&quot;: &quot;${Endpointid}&quot;, &#xd;
        &quot;path&quot;: &quot;HKEY_LOCAL_MACHINESYSTEMCURRENTCONTROLSETSERVICESNTDSPARAMETERS&quot;, &#xd;
        &quot;exist&quot;: false, &#xd;
        &quot;timestamp&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss,)}.486Z&quot;, &#xd;
        &quot;values&quot;: [ &#xd;
            { &#xd;
                &quot;name&quot;: &quot;Backup Latency Threshold&quot;, &#xd;
                &quot;exist&quot;: false &#xd;
            } &#xd;
        ] &#xd;
    }, &#xd;
    { &#xd;
        &quot;endpointID&quot;: &quot;${Endpointid}&quot;, &#xd;
        &quot;path&quot;: &quot;HKEY_LOCAL_MACHINESYSTEMCURRENTCONTROLSETSERVICESNTFRSPARAMETERSSYSVOL&quot;, &#xd;
        &quot;exist&quot;: false, &#xd;
        &quot;timestamp&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss,)}.486Z&quot; &#xd;
    } &#xd;
] </stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${AMS_URL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/agent/v1/${Endpointid}/registry</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="kafka_producer-TPM" enabled="true">
          <intProp name="calcMode">0</intProp>
          <stringProp name="throughput">${post_registry_msg_tpm}</stringProp>
        </ConstantThroughputTimer>
        <hashTree/>
      </hashTree>
      <kg.apc.jmeter.threads.UltimateThreadGroup guiclass="kg.apc.jmeter.threads.UltimateThreadGroupGui" testclass="kg.apc.jmeter.threads.UltimateThreadGroup" testname="kafka_producer" enabled="false">
        <collectionProp name="ultimatethreadgroupdata">
          <collectionProp name="-618228483">
            <stringProp name="-2137386702">${kafka_producer_users}</stringProp>
            <stringProp name="0">0</stringProp>
            <stringProp name="-710016557">${kafka_producer_rampup}</stringProp>
            <stringProp name="-289938830">${duration}</stringProp>
            <stringProp name="48">0</stringProp>
          </collectionProp>
        </collectionProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
      </kg.apc.jmeter.threads.UltimateThreadGroup>
      <hashTree>
        <JavaSampler guiclass="JavaTestSamplerGui" testclass="JavaSampler" testname="kafka_post" enabled="true">
          <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="kafka_brokers" elementType="Argument">
                <stringProp name="Argument.name">kafka_brokers</stringProp>
                <stringProp name="Argument.value">${KAFKA_BROKERS}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="kafka_topic" elementType="Argument">
                <stringProp name="Argument.name">kafka_topic</stringProp>
                <stringProp name="Argument.value">${KAFKA_TOPIC}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="kafka_key" elementType="Argument">
                <stringProp name="Argument.name">kafka_key</stringProp>
                <stringProp name="Argument.value">${siteid}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="kafka_message" elementType="Argument">
                <stringProp name="Argument.name">kafka_message</stringProp>
                <stringProp name="Argument.value">${message}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="kafka_message_serializer" elementType="Argument">
                <stringProp name="Argument.name">kafka_message_serializer</stringProp>
                <stringProp name="Argument.value">kafka.serializer.DefaultEncoder</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="kafka_key_serializer" elementType="Argument">
                <stringProp name="Argument.name">kafka_key_serializer</stringProp>
                <stringProp name="Argument.value">kafka.serializer.NullEncoder</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="classname">co.signal.kafkameter.KafkaProducerSampler</stringProp>
        </JavaSampler>
        <hashTree/>
        <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">false</stringProp>
          <stringProp name="script">vars.put(&quot;message&quot;,&quot;{ \&quot;Action\&quot; : \&quot;registry\&quot; ,\&quot;Topic\&quot; : \&quot;registry\&quot; ,\&quot;RegID\&quot; : \&quot;${Endpointid}\&quot; ,\&quot;ProbeEndpointID\&quot; : \&quot;\&quot; ,\&quot;LegacyRegID\&quot; : \&quot;${RegID}\&quot; ,\&quot;DcDateTimeUtc\&quot; : \&quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss,)}.486120718Z\&quot; ,\&quot;AgentInstalledUTC\&quot; : \&quot;2020-04-03T08:40:31.132Z\&quot; ,\&quot;PartnerID\&quot; : \&quot;${partnerId}\&quot; ,\&quot;ClientID\&quot; : \&quot;${siteid}\&quot; ,\&quot;SiteID\&quot; : \&quot;${siteid}\&quot; ,\&quot;EndpointID\&quot; : \&quot;${Endpointid}\&quot; ,\&quot;EndpointType\&quot; : \&quot;Desktop\&quot; ,\&quot;AgentID\&quot; : \&quot;${Endpointid}\&quot; ,\&quot;RemoteAddr\&quot; : \&quot;10.2.200.180\&quot; ,\&quot;TransactionID\&quot; : \&quot;${GUUID}\&quot; ,\&quot;OSName\&quot; : \&quot;Windows 10 Pro\&quot; ,\&quot;OSType\&quot; : \&quot;windows\&quot; ,\&quot;OSVersion\&quot; : \&quot;10.0.18363\&quot; ,\&quot;Message\&quot; :  [ \n&quot; +
&quot;    { \n&quot; +
&quot;        \&quot;endpointID\&quot;: \&quot;${Endpointid}\&quot;, \n&quot; +
&quot;        \&quot;path\&quot;: \&quot;HKEY_LOCAL_MACHINECLUSTER\&quot;, \n&quot; +
&quot;        \&quot;exist\&quot;: false, \n&quot; +
&quot;        \&quot;timestamp\&quot;: \&quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss,)}.486Z\&quot; \n&quot; +
&quot;    }, \n&quot; +
&quot;    { \n&quot; +
&quot;        \&quot;endpointID\&quot;: \&quot;${Endpointid}\&quot;, \n&quot; +
&quot;        \&quot;path\&quot;: \&quot;HKEY_LOCAL_MACHINECLUSTEREXCHANGEDAGNETWORK\&quot;, \n&quot; +
&quot;        \&quot;exist\&quot;: false, \n&quot; +
&quot;        \&quot;timestamp\&quot;: \&quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss,)}.486Z\&quot; \n&quot; +
&quot;    }, \n&quot; +
&quot;    { \n&quot; +
&quot;        \&quot;endpointID\&quot;: \&quot;${Endpointid}\&quot;, \n&quot; +
&quot;        \&quot;path\&quot;: \&quot;HKEY_LOCAL_MACHINESOFTWAREMICROSOFTEXCHANGESERVERV14\&quot;, \n&quot; +
&quot;        \&quot;exist\&quot;: false, \n&quot; +
&quot;        \&quot;timestamp\&quot;: \&quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss,)}.486Z\&quot; \n&quot; +
&quot;    }, \n&quot; +
&quot;    { \n&quot; +
&quot;        \&quot;endpointID\&quot;: \&quot;${Endpointid}\&quot;, \n&quot; +
&quot;        \&quot;path\&quot;: \&quot;HKEY_LOCAL_MACHINESOFTWAREMICROSOFTEXCHANGESERVERV15\&quot;, \n&quot; +
&quot;        \&quot;exist\&quot;: false, \n&quot; +
&quot;        \&quot;timestamp\&quot;: \&quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss,)}.486Z\&quot; \n&quot; +
&quot;    }, \n&quot; +
&quot;    { \n&quot; +
&quot;        \&quot;endpointID\&quot;: \&quot;${Endpointid}\&quot;, \n&quot; +
&quot;        \&quot;path\&quot;: \&quot;HKEY_LOCAL_MACHINESOFTWAREMICROSOFTEXCHANGEV8.0\&quot;, \n&quot; +
&quot;        \&quot;exist\&quot;: false, \n&quot; +
&quot;        \&quot;timestamp\&quot;: \&quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss,)}.486Z\&quot; \n&quot; +
&quot;    }, \n&quot; +
&quot;    { \n&quot; +
&quot;        \&quot;endpointID\&quot;: \&quot;${Endpointid}\&quot;, \n&quot; +
&quot;        \&quot;path\&quot;: \&quot;HKEY_LOCAL_MACHINESOFTWAREMICROSOFTEXCHANGEV8.0CLIENTACCESSROLE\&quot;, \n&quot; +
&quot;        \&quot;exist\&quot;: false, \n&quot; +
&quot;        \&quot;timestamp\&quot;: \&quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss,)}.486Z\&quot; \n&quot; +
&quot;    }, \n&quot; +
&quot;    { \n&quot; +
&quot;        \&quot;endpointID\&quot;: \&quot;${Endpointid}\&quot;, \n&quot; +
&quot;        \&quot;path\&quot;: \&quot;HKEY_LOCAL_MACHINESOFTWAREMICROSOFTEXCHANGEV8.0EDGETRANSPORTROLE\&quot;, \n&quot; +
&quot;        \&quot;exist\&quot;: false, \n&quot; +
&quot;        \&quot;timestamp\&quot;: \&quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss,)}.486Z\&quot; \n&quot; +
&quot;    }, \n&quot; +
&quot;    { \n&quot; +
&quot;        \&quot;endpointID\&quot;: \&quot;${Endpointid}\&quot;, \n&quot; +
&quot;        \&quot;path\&quot;: \&quot;HKEY_LOCAL_MACHINESOFTWAREMICROSOFTEXCHANGEV8.0HUBTRANSPORTROLE\&quot;, \n&quot; +
&quot;        \&quot;exist\&quot;: false, \n&quot; +
&quot;        \&quot;timestamp\&quot;: \&quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss,)}.486Z\&quot; \n&quot; +
&quot;    }, \n&quot; +
&quot;    { \n&quot; +
&quot;        \&quot;endpointID\&quot;: \&quot;${Endpointid}\&quot;, \n&quot; +
&quot;        \&quot;path\&quot;: \&quot;HKEY_LOCAL_MACHINESOFTWAREMICROSOFTEXCHANGEV8.0MAILBOXROLE\&quot;, \n&quot; +
&quot;        \&quot;exist\&quot;: false, \n&quot; +
&quot;        \&quot;timestamp\&quot;: \&quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss,)}.486Z\&quot; \n&quot; +
&quot;    }, \n&quot; +
&quot;    { \n&quot; +
&quot;        \&quot;endpointID\&quot;: \&quot;${Endpointid}\&quot;, \n&quot; +
&quot;        \&quot;path\&quot;: \&quot;HKEY_LOCAL_MACHINESOFTWAREMICROSOFTMICROSOFT SQL SERVER\&quot;, \n&quot; +
&quot;        \&quot;exist\&quot;: false, \n&quot; +
&quot;        \&quot;timestamp\&quot;: \&quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss,)}.486Z\&quot; \n&quot; +
&quot;    }, \n&quot; +
&quot;    { \n&quot; +
&quot;        \&quot;endpointID\&quot;: \&quot;${Endpointid}\&quot;, \n&quot; +
&quot;        \&quot;path\&quot;: \&quot;HKEY_LOCAL_MACHINESOFTWAREMICROSOFTSERVERMANAGERSERVICINGSTORAGESERVERCOMPONENTCACHEAD-DOMAIN-SERVICES\&quot;, \n&quot; +
&quot;        \&quot;exist\&quot;: false, \n&quot; +
&quot;        \&quot;timestamp\&quot;: \&quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss,)}.486Z\&quot;, \n&quot; +
&quot;        \&quot;values\&quot;: [ \n&quot; +
&quot;            { \n&quot; +
&quot;                \&quot;name\&quot;: \&quot;InstallState\&quot;, \n&quot; +
&quot;                \&quot;exist\&quot;: false \n&quot; +
&quot;            } \n&quot; +
&quot;        ] \n&quot; +
&quot;    }, \n&quot; +
&quot;    { \n&quot; +
&quot;        \&quot;endpointID\&quot;: \&quot;${Endpointid}\&quot;, \n&quot; +
&quot;        \&quot;path\&quot;: \&quot;HKEY_LOCAL_MACHINESOFTWAREMICROSOFTSERVERMANAGERSERVICINGSTORAGESERVERCOMPONENTCACHEDHCP\&quot;, \n&quot; +
&quot;        \&quot;exist\&quot;: false, \n&quot; +
&quot;        \&quot;timestamp\&quot;: \&quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss,)}.486Z\&quot;, \n&quot; +
&quot;        \&quot;values\&quot;: [ \n&quot; +
&quot;            { \n&quot; +
&quot;                \&quot;name\&quot;: \&quot;InstallState\&quot;, \n&quot; +
&quot;                \&quot;exist\&quot;: false \n&quot; +
&quot;            } \n&quot; +
&quot;        ] \n&quot; +
&quot;    }, \n&quot; +
&quot;    { \n&quot; +
&quot;        \&quot;endpointID\&quot;: \&quot;${Endpointid}\&quot;, \n&quot; +
&quot;        \&quot;path\&quot;: \&quot;HKEY_LOCAL_MACHINESOFTWAREMICROSOFTSERVERMANAGERSERVICINGSTORAGESERVERCOMPONENTCACHEDNS\&quot;, \n&quot; +
&quot;        \&quot;exist\&quot;: false, \n&quot; +
&quot;        \&quot;timestamp\&quot;: \&quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss,)}.486Z\&quot;, \n&quot; +
&quot;        \&quot;values\&quot;: [ \n&quot; +
&quot;            { \n&quot; +
&quot;                \&quot;name\&quot;: \&quot;InstallState\&quot;, \n&quot; +
&quot;                \&quot;exist\&quot;: false \n&quot; +
&quot;            } \n&quot; +
&quot;        ] \n&quot; +
&quot;    }, \n&quot; +
&quot;    { \n&quot; +
&quot;        \&quot;endpointID\&quot;: \&quot;${Endpointid}\&quot;, \n&quot; +
&quot;        \&quot;path\&quot;: \&quot;HKEY_LOCAL_MACHINESOFTWAREMICROSOFTWINDOWS NTCURRENTVERSION\&quot;, \n&quot; +
&quot;        \&quot;exist\&quot;: true, \n&quot; +
&quot;        \&quot;timestamp\&quot;: \&quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss,)}.486Z\&quot;, \n&quot; +
&quot;        \&quot;values\&quot;: [ \n&quot; +
&quot;            { \n&quot; +
&quot;                \&quot;name\&quot;: \&quot;CurrentVersion\&quot;, \n&quot; +
&quot;                \&quot;data\&quot;: \&quot;6.3\&quot;, \n&quot; +
&quot;                \&quot;exist\&quot;: true \n&quot; +
&quot;            } \n&quot; +
&quot;        ] \n&quot; +
&quot;    }, \n&quot; +
&quot;    { \n&quot; +
&quot;        \&quot;endpointID\&quot;: \&quot;${Endpointid}\&quot;, \n&quot; +
&quot;        \&quot;path\&quot;: \&quot;HKEY_LOCAL_MACHINESOFTWAREMICROSOFTWINDOWS NTCURRENTVERSIONSCHEDULETASKCACHETREEMICROSOFTWINDOWSBACKUPMICROSOFT-WINDOWS-WINDOWSBACKUP\&quot;, \n&quot; +
&quot;        \&quot;exist\&quot;: false, \n&quot; +
&quot;        \&quot;timestamp\&quot;: \&quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss,)}.486Z\&quot;, \n&quot; +
&quot;        \&quot;values\&quot;: [ \n&quot; +
&quot;            { \n&quot; +
&quot;                \&quot;name\&quot;: \&quot;Id\&quot;, \n&quot; +
&quot;                \&quot;exist\&quot;: false \n&quot; +
&quot;            } \n&quot; +
&quot;        ] \n&quot; +
&quot;    }, \n&quot; +
&quot;    { \n&quot; +
&quot;        \&quot;endpointID\&quot;: \&quot;${Endpointid}\&quot;, \n&quot; +
&quot;        \&quot;path\&quot;: \&quot;HKEY_LOCAL_MACHINESOFTWAREMICROSOFTWINDOWS NTCURRENTVERSIONVIRTUALIZATION\&quot;, \n&quot; +
&quot;        \&quot;exist\&quot;: true, \n&quot; +
&quot;        \&quot;timestamp\&quot;: \&quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss,)}.486Z\&quot; \n&quot; +
&quot;    }, \n&quot; +
&quot;    { \n&quot; +
&quot;        \&quot;endpointID\&quot;: \&quot;${Endpointid}\&quot;, \n&quot; +
&quot;        \&quot;path\&quot;: \&quot;HKEY_LOCAL_MACHINESOFTWAREMICROSOFTWINDOWSNTCURRENTVERSIONSCHEDULETASKCACHETREEMICROSOFTWINDOWSBACKUPMICROSOFT-WINDOWS-WINDOWSBACKUP\&quot;, \n&quot; +
&quot;        \&quot;exist\&quot;: false, \n&quot; +
&quot;        \&quot;timestamp\&quot;: \&quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss,)}.486Z\&quot; \n&quot; +
&quot;    }, \n&quot; +
&quot;    { \n&quot; +
&quot;        \&quot;endpointID\&quot;: \&quot;${Endpointid}\&quot;, \n&quot; +
&quot;        \&quot;path\&quot;: \&quot;HKEY_LOCAL_MACHINESOFTWAREMICROSOFTWINDOWSCURRENTVERSIONOEMINFORMATIONWINDOWS AZURE\&quot;, \n&quot; +
&quot;        \&quot;exist\&quot;: false, \n&quot; +
&quot;        \&quot;timestamp\&quot;: \&quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss,)}.486Z\&quot; \n&quot; +
&quot;    }, \n&quot; +
&quot;    { \n&quot; +
&quot;        \&quot;endpointID\&quot;: \&quot;${Endpointid}\&quot;, \n&quot; +
&quot;        \&quot;path\&quot;: \&quot;HKEY_LOCAL_MACHINESOFTWAREMICROSOFTWINDOWSCURRENTVERSIONUNINSTALLMICROSOFT EXCHANGE V14\&quot;, \n&quot; +
&quot;        \&quot;exist\&quot;: false, \n&quot; +
&quot;        \&quot;timestamp\&quot;: \&quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss,)}.486Z\&quot; \n&quot; +
&quot;    }, \n&quot; +
&quot;    { \n&quot; +
&quot;        \&quot;endpointID\&quot;: \&quot;${Endpointid}\&quot;, \n&quot; +
&quot;        \&quot;path\&quot;: \&quot;HKEY_LOCAL_MACHINESOFTWAREMICROSOFTWINDOWSCURRENTVERSIONUNINSTALL{24B2C164-DE66-44FE-B468-A46D9D5E6B31}\&quot;, \n&quot; +
&quot;        \&quot;exist\&quot;: false, \n&quot; +
&quot;        \&quot;timestamp\&quot;: \&quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss,)}.486Z\&quot; \n&quot; +
&quot;    }, \n&quot; +
&quot;    { \n&quot; +
&quot;        \&quot;endpointID\&quot;: \&quot;${Endpointid}\&quot;, \n&quot; +
&quot;        \&quot;path\&quot;: \&quot;HKEY_LOCAL_MACHINESOFTWAREMICROSOFTWINDOWSCURRENTVERSIONUNINSTALL{2B8EC4BD-5638-47E2-8817-1A50B38A828D}\&quot;, \n&quot; +
&quot;        \&quot;exist\&quot;: false, \n&quot; +
&quot;        \&quot;timestamp\&quot;: \&quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss,)}.486Z\&quot; \n&quot; +
&quot;    }, \n&quot; +
&quot;    { \n&quot; +
&quot;        \&quot;endpointID\&quot;: \&quot;${Endpointid}\&quot;, \n&quot; +
&quot;        \&quot;path\&quot;: \&quot;HKEY_LOCAL_MACHINESOFTWAREMICROSOFTWINDOWSCURRENTVERSIONUNINSTALL{5717D53E-DD6D-4D1E-8A1F-C7BE620F65AA}\&quot;, \n&quot; +
&quot;        \&quot;exist\&quot;: false, \n&quot; +
&quot;        \&quot;timestamp\&quot;: \&quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss,)}.486Z\&quot; \n&quot; +
&quot;    }, \n&quot; +
&quot;    { \n&quot; +
&quot;        \&quot;endpointID\&quot;: \&quot;${Endpointid}\&quot;, \n&quot; +
&quot;        \&quot;path\&quot;: \&quot;HKEY_LOCAL_MACHINESOFTWAREMICROSOFTWINDOWSCURRENTVERSIONUNINSTALL{65D9643D-06E8-47D6-865E-80F4CC9BB879}\&quot;, \n&quot; +
&quot;        \&quot;exist\&quot;: false, \n&quot; +
&quot;        \&quot;timestamp\&quot;: \&quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss,)}.486Z\&quot; \n&quot; +
&quot;    }, \n&quot; +
&quot;    { \n&quot; +
&quot;        \&quot;endpointID\&quot;: \&quot;${Endpointid}\&quot;, \n&quot; +
&quot;        \&quot;path\&quot;: \&quot;HKEY_LOCAL_MACHINESOFTWAREMICROSOFTWINDOWSCURRENTVERSIONUNINSTALL{74F3BB3C-A434-48FA-AAC1-3FC37CD2B0DB}\&quot;, \n&quot; +
&quot;        \&quot;exist\&quot;: false, \n&quot; +
&quot;        \&quot;timestamp\&quot;: \&quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss,)}.486Z\&quot; \n&quot; +
&quot;    }, \n&quot; +
&quot;    { \n&quot; +
&quot;        \&quot;endpointID\&quot;: \&quot;${Endpointid}\&quot;, \n&quot; +
&quot;        \&quot;path\&quot;: \&quot;HKEY_LOCAL_MACHINESOFTWAREMICROSOFTWINDOWSCURRENTVERSIONUNINSTALL{775CF3DA-C007-4709-B4CC-CE2239BE2E03}\&quot;, \n&quot; +
&quot;        \&quot;exist\&quot;: false, \n&quot; +
&quot;        \&quot;timestamp\&quot;: \&quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss,)}.486Z\&quot; \n&quot; +
&quot;    }, \n&quot; +
&quot;    { \n&quot; +
&quot;        \&quot;endpointID\&quot;: \&quot;${Endpointid}\&quot;, \n&quot; +
&quot;        \&quot;path\&quot;: \&quot;HKEY_LOCAL_MACHINESOFTWAREMICROSOFTWINDOWSCURRENTVERSIONUNINSTALL{7F4210A8-D3B4-480A-835E-D5DAA0D0B157}\&quot;, \n&quot; +
&quot;        \&quot;exist\&quot;: false, \n&quot; +
&quot;        \&quot;timestamp\&quot;: \&quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss,)}.486Z\&quot; \n&quot; +
&quot;    }, \n&quot; +
&quot;    { \n&quot; +
&quot;        \&quot;endpointID\&quot;: \&quot;${Endpointid}\&quot;, \n&quot; +
&quot;        \&quot;path\&quot;: \&quot;HKEY_LOCAL_MACHINESOFTWAREMICROSOFTWINDOWSCURRENTVERSIONUNINSTALL{8B102332-6052-4AF3-ADFA-35A3DED0506A}\&quot;, \n&quot; +
&quot;        \&quot;exist\&quot;: false, \n&quot; +
&quot;        \&quot;timestamp\&quot;: \&quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss,)}.486Z\&quot; \n&quot; +
&quot;    }, \n&quot; +
&quot;    { \n&quot; +
&quot;        \&quot;endpointID\&quot;: \&quot;${Endpointid}\&quot;, \n&quot; +
&quot;        \&quot;path\&quot;: \&quot;HKEY_LOCAL_MACHINESOFTWAREMICROSOFTWINDOWSCURRENTVERSIONUNINSTALL{9161A261-6ABE-4668-BBFA-AD06B3F642CF}\&quot;, \n&quot; +
&quot;        \&quot;exist\&quot;: false, \n&quot; +
&quot;        \&quot;timestamp\&quot;: \&quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss,)}.486Z\&quot; \n&quot; +
&quot;    }, \n&quot; +
&quot;    { \n&quot; +
&quot;        \&quot;endpointID\&quot;: \&quot;${Endpointid}\&quot;, \n&quot; +
&quot;        \&quot;path\&quot;: \&quot;HKEY_LOCAL_MACHINESOFTWAREMICROSOFTWINDOWSCURRENTVERSIONUNINSTALL{C160866F-DE53-434F-ADF1-CC42ABBF8778}\&quot;, \n&quot; +
&quot;        \&quot;exist\&quot;: false, \n&quot; +
&quot;        \&quot;timestamp\&quot;: \&quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss,)}.486Z\&quot; \n&quot; +
&quot;    }, \n&quot; +
&quot;    { \n&quot; +
&quot;        \&quot;endpointID\&quot;: \&quot;${Endpointid}\&quot;, \n&quot; +
&quot;        \&quot;path\&quot;: \&quot;HKEY_LOCAL_MACHINESOFTWAREMICROSOFTWINDOWSCURRENTVERSIONUNINSTALL{D3574E0C-360A-44D5-858C-33323C2D79F2}\&quot;, \n&quot; +
&quot;        \&quot;exist\&quot;: false, \n&quot; +
&quot;        \&quot;timestamp\&quot;: \&quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss,)}.486Z\&quot; \n&quot; +
&quot;    }, \n&quot; +
&quot;    { \n&quot; +
&quot;        \&quot;endpointID\&quot;: \&quot;${Endpointid}\&quot;, \n&quot; +
&quot;        \&quot;path\&quot;: \&quot;HKEY_LOCAL_MACHINESOFTWAREMICROSOFTWINDOWSCURRENTVERSIONUNINSTALL{DB20F7FD-67BC-4813-8808-78F63E89EB56}\&quot;, \n&quot; +
&quot;        \&quot;exist\&quot;: false, \n&quot; +
&quot;        \&quot;timestamp\&quot;: \&quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss,)}.486Z\&quot; \n&quot; +
&quot;    }, \n&quot; +
&quot;    { \n&quot; +
&quot;        \&quot;endpointID\&quot;: \&quot;${Endpointid}\&quot;, \n&quot; +
&quot;        \&quot;path\&quot;: \&quot;HKEY_LOCAL_MACHINESOFTWAREMICROSOFTWINDOWSCURRENTVERSIONUNINSTALL{EAE76D62-2691-4883-8BBB-1F2EE6D370D}\&quot;, \n&quot; +
&quot;        \&quot;exist\&quot;: false, \n&quot; +
&quot;        \&quot;timestamp\&quot;: \&quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss,)}.486Z\&quot; \n&quot; +
&quot;    }, \n&quot; +
&quot;    { \n&quot; +
&quot;        \&quot;endpointID\&quot;: \&quot;${Endpointid}\&quot;, \n&quot; +
&quot;        \&quot;path\&quot;: \&quot;HKEY_LOCAL_MACHINESOFTWAREMICROSOFTWINDOWSCURRENTVERSIONUNINSTALL{F95DE19F-CF69-4B03-81B6-9EC050D20D3B}\&quot;, \n&quot; +
&quot;        \&quot;exist\&quot;: false, \n&quot; +
&quot;        \&quot;timestamp\&quot;: \&quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss,)}.486Z\&quot; \n&quot; +
&quot;    }, \n&quot; +
&quot;    { \n&quot; +
&quot;        \&quot;endpointID\&quot;: \&quot;${Endpointid}\&quot;, \n&quot; +
&quot;        \&quot;path\&quot;: \&quot;HKEY_LOCAL_MACHINESOFTWAREMICROSOFTWINDOWSCURRENTVERSIONUNINSTALL{FC6FA539-452D-4A9B-8065-C1FA74B86F83}\&quot;, \n&quot; +
&quot;        \&quot;exist\&quot;: false, \n&quot; +
&quot;        \&quot;timestamp\&quot;: \&quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss,)}.486Z\&quot; \n&quot; +
&quot;    }, \n&quot; +
&quot;    { \n&quot; +
&quot;        \&quot;endpointID\&quot;: \&quot;${Endpointid}\&quot;, \n&quot; +
&quot;        \&quot;path\&quot;: \&quot;HKEY_LOCAL_MACHINESOFTWAREMICROSOFTWINDOWSCURRENTVERSIONWINDOWSUPDATEAUTO UPDATEREBOOTREQUIRED\&quot;, \n&quot; +
&quot;        \&quot;exist\&quot;: false, \n&quot; +
&quot;        \&quot;timestamp\&quot;: \&quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss,)}.486Z\&quot; \n&quot; +
&quot;    }, \n&quot; +
&quot;    { \n&quot; +
&quot;        \&quot;endpointID\&quot;: \&quot;${Endpointid}\&quot;, \n&quot; +
&quot;        \&quot;path\&quot;: \&quot;HKEY_LOCAL_MACHINESYSTEMCURRENTCONTROLSETCONTROLPRODUCTOPTIONS\&quot;, \n&quot; +
&quot;        \&quot;exist\&quot;: true, \n&quot; +
&quot;        \&quot;timestamp\&quot;: \&quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss,)}.486Z\&quot;, \n&quot; +
&quot;        \&quot;values\&quot;: [ \n&quot; +
&quot;            { \n&quot; +
&quot;                \&quot;name\&quot;: \&quot;ProductType\&quot;, \n&quot; +
&quot;                \&quot;data\&quot;: \&quot;WinNT\&quot;, \n&quot; +
&quot;                \&quot;exist\&quot;: true \n&quot; +
&quot;            } \n&quot; +
&quot;        ] \n&quot; +
&quot;    }, \n&quot; +
&quot;    { \n&quot; +
&quot;        \&quot;endpointID\&quot;: \&quot;${Endpointid}\&quot;, \n&quot; +
&quot;        \&quot;path\&quot;: \&quot;HKEY_LOCAL_MACHINESYSTEMCURRENTCONTROLSETCONTROLPRODUCTOPTIONSPRODUCTTYPE\&quot;, \n&quot; +
&quot;        \&quot;exist\&quot;: false, \n&quot; +
&quot;        \&quot;timestamp\&quot;: \&quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss,)}.486Z\&quot;, \n&quot; +
&quot;        \&quot;values\&quot;: [ \n&quot; +
&quot;            { \n&quot; +
&quot;                \&quot;name\&quot;: \&quot;LanmanNT\&quot;, \n&quot; +
&quot;                \&quot;exist\&quot;: false \n&quot; +
&quot;            } \n&quot; +
&quot;        ] \n&quot; +
&quot;    }, \n&quot; +
&quot;    { \n&quot; +
&quot;        \&quot;endpointID\&quot;: \&quot;${Endpointid}\&quot;, \n&quot; +
&quot;        \&quot;path\&quot;: \&quot;HKEY_LOCAL_MACHINESYSTEMCURRENTCONTROLSETCONTROLSYSTEMINFORMATION\&quot;, \n&quot; +
&quot;        \&quot;exist\&quot;: true, \n&quot; +
&quot;        \&quot;timestamp\&quot;: \&quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss,)}.486Z\&quot;, \n&quot; +
&quot;        \&quot;values\&quot;: [ \n&quot; +
&quot;            { \n&quot; +
&quot;                \&quot;name\&quot;: \&quot;SystemProductName\&quot;, \n&quot; +
&quot;                \&quot;data\&quot;: \&quot;VMware Virtual Platform\&quot;, \n&quot; +
&quot;                \&quot;exist\&quot;: true \n&quot; +
&quot;            } \n&quot; +
&quot;        ] \n&quot; +
&quot;    }, \n&quot; +
&quot;    { \n&quot; +
&quot;        \&quot;endpointID\&quot;: \&quot;${Endpointid}\&quot;, \n&quot; +
&quot;        \&quot;path\&quot;: \&quot;HKEY_LOCAL_MACHINESYSTEMCURRENTCONTROLSETSERVICESDFSR\&quot;, \n&quot; +
&quot;        \&quot;exist\&quot;: false, \n&quot; +
&quot;        \&quot;timestamp\&quot;: \&quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss,)}.486Z\&quot; \n&quot; +
&quot;    }, \n&quot; +
&quot;    { \n&quot; +
&quot;        \&quot;endpointID\&quot;: \&quot;${Endpointid}\&quot;, \n&quot; +
&quot;        \&quot;path\&quot;: \&quot;HKEY_LOCAL_MACHINESYSTEMCURRENTCONTROLSETSERVICESDFSRPARAMETERSSYSVOLS\&quot;, \n&quot; +
&quot;        \&quot;exist\&quot;: false, \n&quot; +
&quot;        \&quot;timestamp\&quot;: \&quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss,)}.486Z\&quot; \n&quot; +
&quot;    }, \n&quot; +
&quot;    { \n&quot; +
&quot;        \&quot;endpointID\&quot;: \&quot;${Endpointid}\&quot;, \n&quot; +
&quot;        \&quot;path\&quot;: \&quot;HKEY_LOCAL_MACHINESYSTEMCURRENTCONTROLSETSERVICESMSEXCHANGEIS\&quot;, \n&quot; +
&quot;        \&quot;exist\&quot;: false, \n&quot; +
&quot;        \&quot;timestamp\&quot;: \&quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss,)}.486Z\&quot; \n&quot; +
&quot;    }, \n&quot; +
&quot;    { \n&quot; +
&quot;        \&quot;endpointID\&quot;: \&quot;${Endpointid}\&quot;, \n&quot; +
&quot;        \&quot;path\&quot;: \&quot;HKEY_LOCAL_MACHINESYSTEMCURRENTCONTROLSETSERVICESNTDSPARAMETERS\&quot;, \n&quot; +
&quot;        \&quot;exist\&quot;: false, \n&quot; +
&quot;        \&quot;timestamp\&quot;: \&quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss,)}.486Z\&quot;, \n&quot; +
&quot;        \&quot;values\&quot;: [ \n&quot; +
&quot;            { \n&quot; +
&quot;                \&quot;name\&quot;: \&quot;Backup Latency Threshold\&quot;, \n&quot; +
&quot;                \&quot;exist\&quot;: false \n&quot; +
&quot;            } \n&quot; +
&quot;        ] \n&quot; +
&quot;    }, \n&quot; +
&quot;    { \n&quot; +
&quot;        \&quot;endpointID\&quot;: \&quot;${Endpointid}\&quot;, \n&quot; +
&quot;        \&quot;path\&quot;: \&quot;HKEY_LOCAL_MACHINESYSTEMCURRENTCONTROLSETSERVICESNTFRSPARAMETERSSYSVOL\&quot;, \n&quot; +
&quot;        \&quot;exist\&quot;: false, \n&quot; +
&quot;        \&quot;timestamp\&quot;: \&quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss,)}.486Z\&quot; \n&quot; +
&quot;    } \n&quot; +
&quot;] \n&quot; +
&quot; }&quot;);</stringProp>
        </JSR223PreProcessor>
        <hashTree/>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="kafka_producer-TPM" enabled="true">
          <intProp name="calcMode">0</intProp>
          <stringProp name="throughput">${kafka_producer_tpm}</stringProp>
        </ConstantThroughputTimer>
        <hashTree/>
      </hashTree>
      <kg.apc.jmeter.threads.UltimateThreadGroup guiclass="kg.apc.jmeter.threads.UltimateThreadGroupGui" testclass="kg.apc.jmeter.threads.UltimateThreadGroup" testname="get_all_tickets" enabled="true">
        <collectionProp name="ultimatethreadgroupdata">
          <collectionProp name="-1076875153">
            <stringProp name="-225241972">${get_single_key_users}</stringProp>
            <stringProp name="48">0</stringProp>
            <stringProp name="-1563072071">${get_single_key_rampup}</stringProp>
            <stringProp name="-289938830">${duration}</stringProp>
            <stringProp name="48">0</stringProp>
          </collectionProp>
        </collectionProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
      </kg.apc.jmeter.threads.UltimateThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="get_all_tickets" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/ticket/v1/partners/${partnerID}/tickets/</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Ticket IDs" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">message</stringProp>
            <stringProp name="RegexExtractor.refname">TicketIds</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;id&quot;: &quot;(.*)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="get_all_keys-TPM" enabled="true">
          <intProp name="calcMode">0</intProp>
          <stringProp name="throughput">${get_all_keys_tpm}</stringProp>
        </ConstantThroughputTimer>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">true</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">true</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <kg.apc.jmeter.threads.UltimateThreadGroup guiclass="kg.apc.jmeter.threads.UltimateThreadGroupGui" testclass="kg.apc.jmeter.threads.UltimateThreadGroup" testname="get_single_key" enabled="false">
        <collectionProp name="ultimatethreadgroupdata">
          <collectionProp name="-389743888">
            <stringProp name="-225241972">${get_single_key_users}</stringProp>
            <stringProp name="0">0</stringProp>
            <stringProp name="-1563072071">${get_single_key_rampup}</stringProp>
            <stringProp name="-289938830">${duration}</stringProp>
            <stringProp name="48">0</stringProp>
          </collectionProp>
        </collectionProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
      </kg.apc.jmeter.threads.UltimateThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="get_single_key" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/registry/v1/partners/${partnerId}/clients/${siteid}/sites/${siteid}/endpoints/${Endpointid}/keys/${__base64Encode(${key},)}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1551768502">${Endpointid}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="get_single_key-TPM" enabled="true">
          <intProp name="calcMode">0</intProp>
          <stringProp name="throughput">${get_single_key_tpm}</stringProp>
        </ConstantThroughputTimer>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data files - Keys" enabled="true">
          <stringProp name="filename">${projectpath}/data/keys.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">key</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.group</stringProp>
        </CSVDataSet>
        <hashTree/>
      </hashTree>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data File - End point details" enabled="false">
        <stringProp name="delimiter">,</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="filename">${projectpath}/data/endpoint_details.csv</stringProp>
        <boolProp name="ignoreFirstLine">true</boolProp>
        <boolProp name="quotedData">false</boolProp>
        <boolProp name="recycle">false</boolProp>
        <stringProp name="shareMode">shareMode.group</stringProp>
        <boolProp name="stopThread">true</boolProp>
        <stringProp name="variableNames">partnerID,queueID,</stringProp>
      </CSVDataSet>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Variables" enabled="false">
        <collectionProp name="Arguments.arguments">
          <elementProp name="GUUID" elementType="Argument">
            <stringProp name="Argument.name">GUUID</stringProp>
            <stringProp name="Argument.value">${__UUID}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>false</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>true</responseData>
            <samplerData>true</samplerData>
            <xml>true</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>true</responseHeaders>
            <requestHeaders>true</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <sampleCount>true</sampleCount>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">${projectpath}/results/vrt_${filename}_${__time(ddMMMyyyy_hhmmss,)}.xml</stringProp>
      </ResultCollector>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">60</stringProp>
        <stringProp name="ThreadGroup.ramp_time">5</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">60</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="post_ticket" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;summary&quot;: &quot;${__RandomString(150,1234ABCDabcd,summary1)}&quot;,&#xd;
    &quot;companyID&quot;: &quot;${__UUID}&quot;,&#xd;
    &quot;queueID&quot;: &quot;324f6f2c-b5c6-448f-8b19-c7e7d0d05c0e&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/ticket/v1/partners/8c374260-41ae-4fc4-bc49-0b31dd0a8bd8/tickets/</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49587">201</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="get_all_tickets" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/ticket/v1/partners/8c374260-41ae-4fc4-bc49-0b31dd0a8bd8/tickets/</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1116933">&quot;id&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Ticket IDs" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">TicketIds</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;([a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12})&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="get_each_ticket_loops" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">${TicketIds_matchNr}</stringProp>
        </LoopController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="post_ticket_Notes" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;detail&quot;: &quot;${__RandomString(4000,1234ABCDabcd,summary1)}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/ticket/v1/partners/8c374260-41ae-4fc4-bc49-0b31dd0a8bd8/tickets/${__V(TicketIds_${__jexl2(${__jm__get_each_ticket_loops__idx}+1)})}/notes/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49587">201</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="get_ticket_byID" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/ticket/v1/partners/8c374260-41ae-4fc4-bc49-0b31dd0a8bd8/tickets/${__V(TicketIds_${__jexl2(${__jm__get_each_ticket_loops__idx}+1)})}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1116933">&quot;id&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="get_ticket_all_Notes" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/ticket/v1/partners/8c374260-41ae-4fc4-bc49-0b31dd0a8bd8/tickets/${__V(TicketIds_${__jexl2(${__jm__get_each_ticket_loops__idx}+1)})}/notes</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1116933">&quot;id&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
          <stringProp name="BeanShellSampler.query">import java.io.FileWriter;
import java.util.Arrays;
import java.io.Writer;
import java.util.List;

//Default separator
char SEPARATOR = &apos;,&apos;;

//function write line in csv
public void writeLine(FileWriter writer, String[] params, char separator)
{
   boolean firstParam = true;

   StringBuilder stringBuilder = new StringBuilder();
   String param = &quot;&quot;;
   
   for (int i = 0; i &lt; params.length; i++)
   {
      //get param
      param = params[i];
      log.info(param);
       
         //if the first param in the line, separator is not needed
       if (!firstParam) 
       {
           stringBuilder.append(separator);
       }

         //Add param to line
       stringBuilder.append(param);
      
       firstParam = false;
   }

   //prepare file to next line
   stringBuilder.append(&quot;\n&quot;);

   //add to file the line
   log.info(stringBuilder.toString());
   writer.append(stringBuilder.toString());

}

//get path of csv file (creates new one if its not exists)
String csvFile = &quot;C:/Users/pankaj.bhambhani/Downloads/blabla.csv&quot;; // for example &apos;/User/Downloads/blabla.csv&apos;

String[] params = {&quot;test&quot;, &quot;test2&quot;, &quot;test3&quot;};

FileWriter fileWriter = new FileWriter(csvFile, false);
writeLine(fileWriter, params, SEPARATOR);

//proper close to file
fileWriter.flush();
fileWriter.close();</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Statuses" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/ticket/v1/partners/${}/statuses/</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="StatusIDs" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">message</stringProp>
            <stringProp name="RegexExtractor.refname">StatusIds</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;id&quot;: &quot;(.*)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="setUp_Thread_Group" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">0</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">5</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </SetupThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="get_all_priorities" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/ticket/v1/partners/${partnerID}/priorities/</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1116933">&quot;id&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Priority ID&apos;s" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PriorityIDs</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;([a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12})&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Queues" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;name&quot;:&quot;${__RandomString(50,1234ABCDabcd)}&quot;,&#xd;
	&quot;defaultPriorityID&quot;: &quot;${__V(PriorityIDs_${__Random(1,4,)})}&quot;&#xd;
}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">ticket/v1/partners/${partnerID}/queues/</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="extract QueueID" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">queueID</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;([a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12})&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Add ID in queueIDs variable" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">String queueIDs = vars.get(&quot;queueIDs&quot;);
queueIDs = queueIDs + &quot;,&quot; + vars.get(&quot;partnerID&quot;) + &quot;_&quot;  + vars.get(&quot;queueID_1&quot;) ;
queueIDs = queueIDs.replace(&quot;null,&quot;,&quot;&quot;);
vars.put(&quot;queueIDs&quot;, queueIDs.toString());</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Tags" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;name&quot;:&quot;${__RandomString(50,1234ABCDabcd)}&quot;&#xd;
}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">ticket/v1/partners/${partnerID}/tags</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="extract TagID" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">tagID</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;([a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12})&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Add ID in tagIDs variable" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">String tagIDs = vars.get(&quot;tagIDs&quot;);
tagIDs = tagIDs + &quot;,&quot; + vars.get(&quot;partnerID&quot;) + &quot;_&quot; + vars.get(&quot;tagID_1&quot;) ;
tagIDs = tagIDs.replace(&quot;null,&quot;,&quot;&quot;);
vars.put(&quot;tagIDs&quot;, tagIDs.toString());
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Teams" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;name&quot;:&quot;${__RandomString(150,1234ABCDabcd)}&quot;&#xd;
}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">ticket/v1/partners/${partnerID}/teams</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="extract TeamID" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">teamID</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;([a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12})&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Add ID in teamIDs variable" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">String teamIDs = vars.get(&quot;teamIDs&quot;);
teamIDs = teamIDs + &quot;,&quot; + vars.get(&quot;partnerID&quot;) + &quot;_&quot; + vars.get(&quot;teamID_1&quot;) ;
teamIDs = teamIDs.replace(&quot;null,&quot;,&quot;&quot;);
vars.put(&quot;teamIDs&quot;, teamIDs.toString());
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="script">if(vars.get(&quot;teamIDs&quot;)!=null &amp;&amp; vars.get(&quot;statusWFIDs&quot;)!=null &amp;&amp; vars.get(&quot;tagIDs&quot;)!=null &amp;&amp; vars.get(&quot;queueIDs&quot;)!=null){
String s = vars.get(&quot;teamIDs&quot;);
if(s.split(&quot;,&quot;).length&gt;2){
	String s1 = props.get(&quot;all_teamIDs&quot;);
	s1 = s1 + &quot;,&quot; + s;
	s1 = s1.replace(&quot;null,&quot;,&quot;&quot;);
	props.put(&quot;all_teamIDs&quot;, s1.toString());
     log.info(&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot; + props.get(&quot;all_teamIDs&quot;));  
 }
}






</stringProp>
        </BeanShellPostProcessor>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">${projectpath}/data/partners.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">partnerID</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.group</stringProp>
        </CSVDataSet>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">2</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="post_member_to_team" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">5</stringProp>
        </LoopController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="post_member_team" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;memberID&quot;: &quot;${__UUID}&quot;  &#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/ticket/v1/partners/a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11/teams/${__groovy(props.get(&quot;teamIDs&quot;).substring(${__jexl2(${__jm__post_member_to_team__idx}*37)}\,${__jexl2(${__jm__post_member_to_team__idx}*37+36)}))}/members/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49587">201</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor - working" enabled="true">
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="script">String s1 = vars.get(&quot;queueIDs&quot;);
if(s1!=null){
if(s1.split(&quot;,&quot;).length&gt;4){
log.info(&quot;Queues &gt;&gt;&gt;&gt;&gt; &quot; + s1);
vars.put(&quot;queueIDs&quot;, &quot;&quot;);
}
}

String s2 = vars.get(&quot;tagIDs&quot;);
if(s2!=null){
if(s2.split(&quot;,&quot;).length&gt;4){
log.info(&quot;Tags &gt;&gt;&gt;&gt;&gt; &quot; + s2);
vars.put(&quot;tagIDs&quot;, &quot;&quot;);
}
}

String s3 = vars.get(&quot;teamIDs&quot;);
if(s3!=null){
if(s3.split(&quot;,&quot;).length&gt;4){
log.info(&quot;Teams &gt;&gt;&gt;&gt;&gt; &quot; + s3);
vars.put(&quot;teamIDs&quot;, &quot;&quot;);
}
}

String s4 = vars.get(&quot;statusWFIDs&quot;);
if(s4!=null){
if(s4.split(&quot;,&quot;).length&gt;4){
log.info(&quot;StatusWF &gt;&gt;&gt;&gt;&gt; &quot; + s4);
vars.put(&quot;statusWFIDs&quot;, &quot;&quot;);
}
}

String s5 = vars.get(&quot;memberIDs&quot;);
if(s5!=null){
if(s5.split(&quot;,&quot;).length&gt;4){
log.info(&quot;Members &gt;&gt;&gt;&gt;&gt; &quot; + s5);
vars.put(&quot;memberIDs&quot;, &quot;&quot;);
}
}</stringProp>
        </BeanShellPostProcessor>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="get_all_queues" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/ticket/v1/partners/a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11/queues/</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1116933">&quot;id&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Queue ID&apos;s" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">QueueIDs</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;([a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12})&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="get_all_status" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/ticket/v1/partners/a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11/statuses/</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1116933">&quot;id&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Statuses ID&apos;s" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">StatusIDs</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;([a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12})&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="get_all_tags" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/ticket/v1/partners/a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11/tags/</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1116933">&quot;id&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Tags ID&apos;s" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">TagIDs</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;([a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12})&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="get_all_teams" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/ticket/v1/partners/a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11/teams/</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1116933">&quot;id&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Team ID&apos;s" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">TeamIDs</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;([a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12})&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="get_all_statusWF" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/ticket/v1/partners/a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11/statusWorkflows/</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1116933">&quot;id&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="StatusWorkflow ID&apos;s" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">StatusWFIDs</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;([a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12})&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="post_status_to_statusWF" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">5</stringProp>
        </LoopController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="post_status_statusWF" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;statusID&quot;: &quot;${__V(StatusIDs_${__jexl2(${__jm__post_status_to_statusWF__idx}+1)})}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/ticket/v1/partners/a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11/statusWorkflows/${__V(StatusWFIDs_${__jexl2(${__jm__post_status_to_statusWF__idx}+1)})}/statuses/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49587">201</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="post_status_transition_to_statusWF" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">4</stringProp>
        </LoopController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="post_status_transition_statusWF" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;fromStatusID&quot;: &quot;${__V(StatusIDs_${__jexl2(${__jm__post_status_transition_to_statusWF__idx}+1)})}&quot;,&#xd;
    &quot;toStatusID&quot;: &quot;${__V(StatusIDs_${__jexl2(${__jm__post_status_transition_to_statusWF__idx}+2)})}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/ticket/v1/partners/a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11/statusWorkflows/${__V(StatusWFIDs_${__jexl2(${__jm__post_status_transition_to_statusWF__idx}+1)})}/statusTransitions/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49587">201</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="write_all_CSV_files" enabled="true">
          <stringProp name="BeanShellSampler.query">import java.io.FileWriter;
import java.util.Arrays;
import java.io.Writer;
import java.util.List;

//Default separator
char SEPARATOR = &apos;,&apos;;

//function write line in csv
public void writeLine(FileWriter writer, String[] params, char separator)
{
   boolean firstParam = true;

   StringBuilder stringBuilder = new StringBuilder();
   String param = &quot;&quot;;
   
   for (int i = 0; i &lt; params.length; i++)
   {
      //get param
      param = params[i];
       
         //if the first param in the line, separator is not needed
       if (!firstParam) 
       {
           stringBuilder.append(separator);
       }

         //Add param to line
       stringBuilder.append(param);
      
       firstParam = false;
   }

   //prepare file to next line
   stringBuilder.append(&quot;\n&quot;);

   writer.append(stringBuilder.toString());

}

//get path of csv file (creates new one if its not exists)
String csvFile = &quot;D:/Repositories/RegistryMS/data/partner_tags.csv&quot;;
String[] params = {&quot;a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11&quot;, vars.get(&quot;TagIDs_1&quot;), vars.get(&quot;TagIDs_2&quot;), vars.get(&quot;TagIDs_3&quot;), vars.get(&quot;TagIDs_4&quot;), vars.get(&quot;TagIDs_5&quot;)};
FileWriter fileWriter = new FileWriter(csvFile, true);
writeLine(fileWriter, params, SEPARATOR);
fileWriter.flush();
fileWriter.close();

csvFile = &quot;D:/Repositories/RegistryMS/data/partner_teams.csv&quot;;
String[] params1 = {&quot;a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11&quot;, vars.get(&quot;TeamIDs_1&quot;), vars.get(&quot;TeamIDs_2&quot;), vars.get(&quot;TeamIDs_3&quot;), vars.get(&quot;TeamIDs_4&quot;), vars.get(&quot;TeamIDs_5&quot;)};
fileWriter = new FileWriter(csvFile, true);
writeLine(fileWriter, params1, SEPARATOR);
fileWriter.flush();
fileWriter.close();

csvFile = &quot;D:/Repositories/RegistryMS/data/partner_statusWF.csv&quot;;
String[] params2 = {&quot;a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11&quot;, vars.get(&quot;StatusWFIDs_1&quot;), vars.get(&quot;StatusWFIDs_2&quot;), vars.get(&quot;StatusWFIDs_3&quot;), vars.get(&quot;StatusWFIDs_4&quot;), vars.get(&quot;StatusWFIDs_5&quot;)};
fileWriter = new FileWriter(csvFile, true);
writeLine(fileWriter, params2, SEPARATOR);
fileWriter.flush();
fileWriter.close();

csvFile = &quot;D:/Repositories/RegistryMS/data/partner_statuses.csv&quot;;
String[] params3 = {&quot;a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11&quot;, vars.get(&quot;StatusIDs_1&quot;), vars.get(&quot;StatusIDs_2&quot;), vars.get(&quot;StatusIDs_3&quot;), vars.get(&quot;StatusIDs_4&quot;), vars.get(&quot;StatusIDs_5&quot;)};
fileWriter = new FileWriter(csvFile, true);
writeLine(fileWriter, params3, SEPARATOR);
fileWriter.flush();
fileWriter.close();

csvFile = &quot;D:/Repositories/RegistryMS/data/partner_queues.csv&quot;;
String[] params4 = {&quot;a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11&quot;, props.get(&quot;queueIDs&quot;)};
fileWriter = new FileWriter(csvFile, true);
writeLine(fileWriter, params4, SEPARATOR);
fileWriter.flush();
fileWriter.close();


</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
      </hashTree>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="setUp_Thread_Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">5</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </SetupThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="get_all_statuses" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/ticket/v1/partners/${partnerID}/statuses/</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1116933">&quot;id&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Status ID&apos;s" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">StatusIDs</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;([a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12})&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="get_all_priorities" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/ticket/v1/partners/${partnerID}/priorities/</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1116933">&quot;id&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Priority ID&apos;s" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PriorityIDs</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;([a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12})&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop_Controller_teams" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">5</stringProp>
        </LoopController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Tags" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;name&quot;:&quot;${__RandomString(50,1234ABCDabcd)}&quot;&#xd;
}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">ticket/v1/partners/${partnerID}/tags</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="extract TagID" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">tagID</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;([a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12})&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Add ID in tagIDs variable" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">String tagIDs = vars.get(&quot;tagIDs&quot;);
//tagIDs = tagIDs + &quot;,&quot; + vars.get(&quot;partnerID&quot;) + &quot;_&quot; + vars.get(&quot;tagID_1&quot;) ;
tagIDs = tagIDs + &quot;,&quot; + vars.get(&quot;tagID_1&quot;) ;
//tagIDs = tagIDs.replace(&quot;null,&quot;,&quot;&quot;);
vars.put(&quot;tagIDs&quot;, tagIDs.toString());
</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Teams" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;name&quot;:&quot;${__RandomString(150,1234ABCDabcd)}&quot;&#xd;
}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">ticket/v1/partners/${partnerID}/teams</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="extract TeamID" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">teamID</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;([a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12})&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Add ID in teamIDs variable" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">String teamIDs = vars.get(&quot;teamIDs&quot;);
//teamIDs = teamIDs + &quot;,&quot; + vars.get(&quot;partnerID&quot;) + &quot;_&quot; + vars.get(&quot;teamID_1&quot;) ;
teamIDs = teamIDs + &quot;,&quot; + vars.get(&quot;teamID_1&quot;) ;
//teamIDs = teamIDs.replace(&quot;null,&quot;,&quot;&quot;);
vars.put(&quot;teamIDs&quot;, teamIDs.toString());
</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST MembersToTeam" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;memberID&quot;: &quot;${__UUID}&quot;  &#xd;
}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">ticket/v1/partners/${partnerID}/teams/${teamID_1}/members/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Queues" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;name&quot;:&quot;${__RandomString(50,1234ABCDabcd)}&quot;,&#xd;
	&quot;defaultPriorityID&quot;: &quot;${__V(PriorityIDs_${__Random(1,4,)})}&quot;&#xd;
}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">ticket/v1/partners/${partnerID}/queues/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="extract QueueID" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">queueID</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;([a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12})&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Add ID in queueIDs variable" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">String queueIDs = vars.get(&quot;queueIDs&quot;);
//queueIDs = queueIDs + &quot;,&quot; + vars.get(&quot;partnerID&quot;) + &quot;_&quot;  + vars.get(&quot;queueID_1&quot;) ;
queueIDs = queueIDs + &quot;,&quot; + vars.get(&quot;queueID_1&quot;) ;
//queueIDs = queueIDs.replace(&quot;null,&quot;,&quot;&quot;);
vars.put(&quot;queueIDs&quot;, queueIDs.toString());</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST StatusWF" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;name&quot;:&quot;${__RandomString(150,1234ABCDabcd)}&quot;,&#xd;
	&quot;inactiveFlag&quot;: true&#xd;
}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">ticket/v1/partners/${partnerID}/statusWorkflows/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="extract StatusWFID" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">statusWFID</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;([a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12})&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Add ID in StatusWFIDs variable" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">String statusWFIDs = vars.get(&quot;statusWFIDs&quot;);
//statusWFIDs = statusWFIDs + &quot;,&quot; + vars.get(&quot;partnerID&quot;) + &quot;_&quot; + vars.get(&quot;statusWFID_1&quot;) ;
statusWFIDs = statusWFIDs + &quot;,&quot; + vars.get(&quot;statusWFID_1&quot;) ;
//statusWFIDs = statusWFIDs.replace(&quot;null,&quot;,&quot;&quot;);
vars.put(&quot;statusWFIDs&quot;, statusWFIDs.toString());
</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Team to Queues" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;teamID&quot;: &quot;${teamID_1}&quot;  &#xd;
}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">ticket/v1/partners/${partnerID}/queues/${queueID_1}/teams/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="POST_status_to_WF" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">4</stringProp>
          </LoopController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST status to status WF" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;statusID&quot;: &quot;${__V(StatusIDs_${__jexl2(${__jm__POST_status_to_WF__idx}+1)})}&quot; &#xd;
}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">ticket/v1/partners/${partnerID}/statusWorkflows/${statusWFID_1}/statuses/</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Transition to StatusWF" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;fromStatusID&quot;: &quot;${StatusIDs_1}&quot;,&#xd;
    &quot;toStatusID&quot;: &quot;${StatusIDs_2}&quot;&#xd;
}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">ticket/v1/partners/${partnerID}/statusWorkflows/${statusWFID_1}/statusTransitions/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Activate Status WF" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">[&#xd;
    {&#xd;
      &quot;op&quot;: &quot;replace&quot;,&#xd;
      &quot;path&quot;: &quot;/inactiveFlag&quot;,&#xd;
      &quot;value&quot;: false&#xd;
    }&#xd;
]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">ticket/v1/partners/${partnerID}/statusWorkflows/${statusWFID_1}/</stringProp>
            <stringProp name="HTTPSampler.method">PATCH</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Activate Queue" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">[&#xd;
    {&#xd;
      &quot;op&quot;: &quot;replace&quot;,&#xd;
      &quot;path&quot;: &quot;/statusWorkflowID&quot;,&#xd;
      &quot;value&quot;: &quot;${statusWFID_1}&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;op&quot;: &quot;replace&quot;,&#xd;
      &quot;path&quot;: &quot;/inactiveFlag&quot;,&#xd;
      &quot;value&quot;: false&#xd;
    }&#xd;
]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">ticket/v1/partners/${partnerID}/queues/${queueID_1}/</stringProp>
            <stringProp name="HTTPSampler.method">PATCH</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="script">import java.io.FileWriter;
import java.util.Arrays;
import java.io.Writer;
import java.util.List;

//Default separator
char SEPARATOR = &apos;,&apos;;

//function write line in csv
public void writeLine(FileWriter writer, String[] params, char separator)
{
   boolean firstParam = true;

   StringBuilder stringBuilder = new StringBuilder();
   String param = &quot;&quot;;
   
   for (int i = 0; i &lt; params.length; i++)
   {
      //get param
      param = params[i];
       
         //if the first param in the line, separator is not needed
       if (!firstParam) 
       {
           stringBuilder.append(separator);
       }

         //Add param to line
       stringBuilder.append(param);
      
       firstParam = false;
   }

   //prepare file to next line
   stringBuilder.append(&quot;\n&quot;);

   writer.append(stringBuilder.toString());

}

String s1 = vars.get(&quot;queueIDs&quot;);
String s2 = vars.get(&quot;tagIDs&quot;);
String s3 = vars.get(&quot;teamIDs&quot;);
String s4 = vars.get(&quot;statusWFIDs&quot;);

int count = 5;

if(s1!=null &amp;&amp; s2!=null &amp;&amp; s3!=null &amp;&amp; s4!=null &amp;&amp; s1.split(&quot;,&quot;).length&gt;count &amp;&amp; s2.split(&quot;,&quot;).length&gt;count &amp;&amp; s3.split(&quot;,&quot;).length&gt;count &amp;&amp; s4.split(&quot;,&quot;).length&gt;count){
//log.info(&quot;PartnerID &gt;&gt;&gt;&gt; &quot; + vars.get(&quot;partnerID&quot;));	
//log.info(&quot;Queues &gt;&gt;&gt;&gt;&gt; &quot; + s1);
//log.info(&quot;Tags &gt;&gt;&gt;&gt;&gt; &quot; + s2);
//log.info(&quot;Teams &gt;&gt;&gt;&gt;&gt; &quot; + s3);
//log.info(&quot;StatusWF &gt;&gt;&gt;&gt;&gt; &quot; + s4);
vars.put(&quot;queueIDs&quot;,&quot;&quot;);
vars.put(&quot;tagIDs&quot;,&quot;&quot;);
vars.put(&quot;teamIDs&quot;,&quot;&quot;);
vars.put(&quot;statusWFIDs&quot;,&quot;&quot;);

s1 = s1.replace(&quot;null,&quot;,&quot;&quot;);
s2 = s2.replace(&quot;null,&quot;,&quot;&quot;);
s3 = s3.replace(&quot;null,&quot;,&quot;&quot;);
s4 = s4.replace(&quot;null,&quot;,&quot;&quot;);

String csvFile = &quot;D:/Repositories/RegistryMS/data/partners_data.csv&quot;;
String[] params = {vars.get(&quot;partnerID&quot;), s1, s3, s2, s4}; 
FileWriter fileWriter = new FileWriter(csvFile, true);
writeLine(fileWriter, params, SEPARATOR);
fileWriter.flush();
fileWriter.close();
}</stringProp>
        </BeanShellPostProcessor>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="write_all_CSV_files" enabled="true">
          <stringProp name="BeanShellSampler.query">import java.io.FileWriter;
import java.util.Arrays;
import java.io.Writer;
import java.util.List;

//Default separator
char SEPARATOR = &apos;,&apos;;

//function write line in csv
public void writeLine(FileWriter writer, String[] params, char separator)
{
   boolean firstParam = true;

   StringBuilder stringBuilder = new StringBuilder();
   String param = &quot;&quot;;
   
   for (int i = 0; i &lt; params.length; i++)
   {
      //get param
      param = params[i];
       
         //if the first param in the line, separator is not needed
       if (!firstParam) 
       {
           stringBuilder.append(separator);
       }

         //Add param to line
       stringBuilder.append(param);
      
       firstParam = false;
   }

   //prepare file to next line
   stringBuilder.append(&quot;\n&quot;);

   writer.append(stringBuilder.toString());

}

//get path of csv file (creates new one if its not exists)
String csvFile = &quot;D:/Repositories/RegistryMS/data/partner_tags.csv&quot;;
String[] params = {&quot;a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11&quot;, vars.get(&quot;TagIDs_1&quot;), vars.get(&quot;TagIDs_2&quot;), vars.get(&quot;TagIDs_3&quot;), vars.get(&quot;TagIDs_4&quot;), vars.get(&quot;TagIDs_5&quot;)};
FileWriter fileWriter = new FileWriter(csvFile, true);
writeLine(fileWriter, params, SEPARATOR);
fileWriter.flush();
fileWriter.close();

csvFile = &quot;D:/Repositories/RegistryMS/data/partner_teams.csv&quot;;
String[] params1 = {&quot;a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11&quot;, vars.get(&quot;TeamIDs_1&quot;), vars.get(&quot;TeamIDs_2&quot;), vars.get(&quot;TeamIDs_3&quot;), vars.get(&quot;TeamIDs_4&quot;), vars.get(&quot;TeamIDs_5&quot;)};
fileWriter = new FileWriter(csvFile, true);
writeLine(fileWriter, params1, SEPARATOR);
fileWriter.flush();
fileWriter.close();

csvFile = &quot;D:/Repositories/RegistryMS/data/partner_statusWF.csv&quot;;
String[] params2 = {&quot;a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11&quot;, vars.get(&quot;StatusWFIDs_1&quot;), vars.get(&quot;StatusWFIDs_2&quot;), vars.get(&quot;StatusWFIDs_3&quot;), vars.get(&quot;StatusWFIDs_4&quot;), vars.get(&quot;StatusWFIDs_5&quot;)};
fileWriter = new FileWriter(csvFile, true);
writeLine(fileWriter, params2, SEPARATOR);
fileWriter.flush();
fileWriter.close();

csvFile = &quot;D:/Repositories/RegistryMS/data/partner_statuses.csv&quot;;
String[] params3 = {&quot;a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11&quot;, vars.get(&quot;StatusIDs_1&quot;), vars.get(&quot;StatusIDs_2&quot;), vars.get(&quot;StatusIDs_3&quot;), vars.get(&quot;StatusIDs_4&quot;), vars.get(&quot;StatusIDs_5&quot;)};
fileWriter = new FileWriter(csvFile, true);
writeLine(fileWriter, params3, SEPARATOR);
fileWriter.flush();
fileWriter.close();

csvFile = &quot;D:/Repositories/RegistryMS/data/partner_queues.csv&quot;;
String[] params4 = {&quot;a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11&quot;, props.get(&quot;queueIDs&quot;)};
fileWriter = new FileWriter(csvFile, true);
writeLine(fileWriter, params4, SEPARATOR);
fileWriter.flush();
fileWriter.close();


</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">${projectpath}/data/partnersIDs.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">partnerID</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">false</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.group</stringProp>
        </CSVDataSet>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data File - End point details" enabled="true">
        <stringProp name="delimiter">,</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="filename">${projectpath}/data/partners_data.csv</stringProp>
        <boolProp name="ignoreFirstLine">true</boolProp>
        <boolProp name="quotedData">false</boolProp>
        <boolProp name="recycle">false</boolProp>
        <stringProp name="shareMode">shareMode.group</stringProp>
        <boolProp name="stopThread">true</boolProp>
        <stringProp name="variableNames">partnerID,queue_1,queue_2,queue_3,queue_4,</stringProp>
      </CSVDataSet>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
